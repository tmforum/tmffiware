/**
 * Revenue Settlement and Sharing System GE
 * Copyright (C) 2011-2014,  Javier Lucio - lucio@tid.es
 * Telefonica Investigacion y Desarrollo, S.A.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package es.upm.fiware.rss.model;

// Generated 20-feb-2012 9:51:24 by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * BmPricePoint generated by hbm2java.
 */
@Entity
@Table(name = "bm_price_point")
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
public class BmPricePoint implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private BmPricePointId id;
    private BmObCountry bmObCountry;
    private BmCurrency bmCurrency;
    private BigDecimal nuPrice;
    private Date dtEditDate;

    /**
     * Constructor.
     */
    public BmPricePoint() {
    }

    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name = "txPricePointId", column = @Column(name = "TX_PRICE_POINT_ID", nullable = false,
            length = 64)),
        @AttributeOverride(name = "nuObId", column = @Column(name = "NU_OB_ID", nullable = false, precision = 10,
            scale = 0)),
        @AttributeOverride(name = "nuCountryId", column = @Column(name = "NU_COUNTRY_ID", nullable = false,
            precision = 10, scale = 0))
    })
    public BmPricePointId getId() {
        return this.id;
    }

    public void setId(BmPricePointId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns({
        @JoinColumn(name = "NU_OB_ID", referencedColumnName = "NU_OB_ID", nullable = false, insertable = false,
            updatable = false),
        @JoinColumn(name = "NU_COUNTRY_ID", referencedColumnName = "NU_COUNTRY_ID", nullable = false,
            insertable = false, updatable = false)
    })
    public BmObCountry getBmObCountry() {
        return this.bmObCountry;
    }

    public void setBmObCountry(BmObCountry bmObCountry) {
        this.bmObCountry = bmObCountry;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "NU_CURRENCY_ID", nullable = false)
    public BmCurrency getBmCurrency() {
        return this.bmCurrency;
    }

    public void setBmCurrency(BmCurrency bmCurrency) {
        this.bmCurrency = bmCurrency;
    }

    @Column(name = "NU_PRICE", nullable = false, precision = 20, scale = 5)
    public BigDecimal getNuPrice() {
        return this.nuPrice;
    }

    public void setNuPrice(BigDecimal nuPrice) {
        this.nuPrice = nuPrice;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DT_EDIT_DATE", nullable = false, length = 7)
    public Date getDtEditDate() {
        return this.dtEditDate;
    }

    public void setDtEditDate(Date dtEditDate) {
        this.dtEditDate = dtEditDate;
    }
}
